#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import sys
import random
import string
import agent


def gen_password(length=32):
    """Generates a random password of specified length."""
    choice_pool = string.ascii_letters+string.digits
    return ''.join(random.choice(choice_pool) for _ in range(length))


# FIXME: this is a fake RTP allocation
# Allocation of RTP/UDP ports should be implemented system-wide
def allocate_rtp_ports_range(size):
    """Allocate in "node_id" a RTP port range of the given "size" for
        "module_id" RTP range goes from 10000 to 20000.
    """
    key_path = f'module/{os.environ["MODULE_ID"]}/rtp_ports_sequence'
    prdb = agent.redis_connect(privileged=True)
    # Setup lower limit to 20002
    if not prdb.get(key_path):
        prdb.set(key_path, '20002')
    # Check overflow
    if (size + int(prdb.get(key_path))) > 60002:
        print(agent.SD_ERROR + "RTP range exhausted", file=sys.stderr)
        sys.exit(3)
    # Allocate RTP ports
    seq = prdb.incrby(key_path, size)
    agent.assert_exp(int(seq) > 0)
    return (seq - size, seq - 1)


# RTP port range size for Janus and Asterisk: 500 calls each
size = 1000
sip_start, sip_end = allocate_rtp_ports_range(size)
janus_start, janus_end = allocate_rtp_ports_range(size)

# comma separated TCP port list
port_list = []
port_range = os.environ['TCP_PORTS_RANGE'].split("-")

# TCP ports
for i in range(int(port_range[0]), int(port_range[1]) + 1):
    port_list.append(i)

agent.set_env('NETHVOICE_MARIADB_PORT', port_list[0])
agent.set_env('APACHE_PORT', port_list[1])
agent.set_env('ASTMANAGERPORT', port_list[2])
agent.set_env('TANCREDIPORT', port_list[3])
agent.set_env('JANUS_TRANSPORT_PORT', port_list[4])
agent.set_env('NETHCTI_UI_PORT', port_list[5])
agent.set_env('NETHCTI_SERVER_API_PORT', port_list[6])
agent.set_env('NETHCTI_SERVER_WS_PORT', port_list[7])
agent.set_env('PHONEBOOK_LDAP_PORT', port_list[8])
agent.set_env('NETHCTI_INTERNAL_REST_PORT1', port_list[9])
agent.set_env('NETHCTI_INTERNAL_REST_PORT2', port_list[10])
agent.set_env('NETHCTI_INTERNAL_REST_PORT3', port_list[11])
agent.set_env('NETHCTI_INTERNAL_REST_PORT4', port_list[12])
agent.set_env('NETHCTI_INTERNAL_REST_PORT5', port_list[13])
agent.set_env('NETHCTI_INTERNAL_REST_PORT6', port_list[14])
agent.set_env('NETHCTI_INTERNAL_REST_PORT7', port_list[15])
agent.set_env('NETHCTI_INTERNAL_REST_PORT8', port_list[16])
agent.set_env('NETHCTI_INTERNAL_REST_PORT9', port_list[17])
agent.set_env('NETHCTI_INTERNAL_REST_PORT10', port_list[18])
agent.set_env('NETHCTI_INTERNAL_REST_PORT11', port_list[19])
agent.set_env('NETHCTI_INTERNAL_REST_PORT12', port_list[20])
agent.set_env('NETHCTI_INTERNAL_REST_PORT13', port_list[21])
agent.set_env('NETHCTI_TCP_PORT', port_list[22])
agent.set_env('NETHCTI_TLS_PORT', port_list[23])
agent.set_env('ASTERISK_SIP_PORT', port_list[24])
agent.set_env('ASTERISK_SIPS_PORT', port_list[25])
agent.set_env('ASTERISK_IAX_PORT', port_list[26])

# Set root password for MariaDB
# MARIADB_ROOT_PASSWORD written to passwords.env

# Set DB configuration variables
agent.set_env('AMPDBUSER', 'freepbxuser')
agent.set_env('AMPDBHOST', '127.0.0.1')
agent.set_env('AMPDBNAME', 'asterisk')
agent.set_env('AMPDBENGINE', 'mysql')
# 'AMPDBPASS' written to passwords.env
agent.set_env('AMPMGRUSER', 'asterisk')
# 'AMPMGRPASS' written to passwords.env
agent.set_env('APACHE_RUN_USER', 'asterisk')
agent.set_env('APACHE_RUN_GROUP', 'asterisk')
agent.set_env('AMPASTERISKWEBGROUP', 'asterisk')
agent.set_env('AMPASTERISKWEBUSER', 'asterisk')
# 'NETHCTI_AMI_PASSWORD' written to passwords.env

agent.set_env('BRAND_NAME', 'NethVoice')
agent.set_env('BRAND_SITE', 'https://www.nethesis.it/soluzioni/nethvoice')
agent.set_env('BRAND_DOCS', 'https://docs.nethserver.org/projects/ns8/it/latest/nethvoice.html')

agent.set_env('CDRDBHOST', '127.0.0.1')
agent.set_env('CDRDBNAME', 'asteriskcdrdb')
agent.set_env('CDRDBUSER', 'cdruser')
# 'CDRDBPASS' written to passwords.env

agent.set_env('NETHCTI_DB_HOST', '127.0.0.1')
agent.set_env('NETHCTI_DB_PORT', port_list[0])
agent.set_env('NETHCTI_DB_USER', 'nethcti3')
# 'NETHCTI_DB_PASSWORD' written to passwords.env

# 'TANCREDI_STATIC_TOKEN' written to passwords.env
# 'NETHVOICESECRETKEY' written to passwords.env

# 'JANUS_ADMIN_SECRET' written to passwords.env
agent.set_env('JANUS_DEBUG_LEVEL', 5)
agent.set_env('JANUS_RTPSTART', janus_start)
agent.set_env('JANUS_RTPEND', janus_end)
agent.set_env('ASTERISK_RTPSTART', sip_start)
agent.set_env('ASTERISK_RTPEND', sip_end)
agent.set_env('STUNSERVER', 'stun1.l.google.com')
agent.set_env('STUNPORT', 19302)
agent.set_env('ICEIGNORE', 'vmnet,tap,tun,virb,vb-')
agent.set_env('ICEENFORCE', 'none')

agent.set_env('TRAEFIK_HTTP2HTTPS', 'true')

agent.set_env('PHONEBOOK_DB_HOST', '127.0.0.1')
agent.set_env('PHONEBOOK_DB_PORT', port_list[0])
agent.set_env('PHONEBOOK_DB_NAME', 'phonebook')
agent.set_env('PHONEBOOK_DB_USER', 'pbookuser')
# 'PHONEBOOK_DB_PASS' written to passwords.env
agent.set_env('PHONEBOOK_DB_USER', 'pbookuser')
agent.set_env('PHONEBOOK_LDAP_USER', 'ldapuser')
# 'PHONEBOOK_LDAP_PASS' written to passwords.env
agent.set_env('PHONEBOOK_LDAP_LIMIT', '500')

# Reports
agent.set_env('REPORTS_REDIS_PORT', port_list[27])
agent.set_env('REPORTS_API_PORT', port_list[28])
# 'REPORTS_PASSWORD' written to passwords.env
# 'REPORTS_API_KEY' written to passwords.env
# 'REPORTS_SECRET' written to passwords.env
agent.set_env('REPORTS_UI_PORT', port_list[29])
agent.set_env('ASTERISK_RECORDING_SFTP_PORT', port_list[30])

# Satellite
agent.set_env('ASTERISK_WS_PORT', port_list[31])
agent.set_env('SATELLITE_MQTT_PORT', port_list[32])
agent.set_env('SATELLITE_HTTP_PORT', port_list[33])
satellite_udp_port = allocate_rtp_ports_range(1)[0]
agent.set_env('SATELLITE_RTP_PORT', satellite_udp_port)
agent.set_env('SATELLITE_ARI_APP', 'satellite')
agent.set_env('SATELLITE_ARI_USERNAME', 'satellite')
agent.set_env('SATELLITE_MQTT_USERNAME', 'satellite')

# NethCTI Middleware
agent.set_env('NETHVOICE_MIDDLEWARE_PORT', port_list[34])
agent.set_env('NETHVOICE_MIDDLEWARE_LISTEN_ADDRESS', '127.0.0.1:' + str(port_list[34]))
agent.set_env('NETHVOICE_MIDDLEWARE_V1_API_ENDPOINT', '127.0.0.1:' + str(port_list[6]))
agent.set_env('NETHVOICE_MIDDLEWARE_V1_WS_ENDPOINT', '127.0.0.1:' + str(port_list[7]))
agent.set_env('NETHVOICE_MIDDLEWARE_V1_API_PATH', '')
agent.set_env('NETHVOICE_MIDDLEWARE_V1_WS_PATH', '/socket.io')
agent.set_env('NETHVOICE_MIDDLEWARE_V1_PROTOCOL', 'http')

# password file
passwords = {
    "MARIADB_ROOT_PASSWORD": gen_password(),
    "AMPDBPASS": gen_password(),
    "AMPMGRPASS": gen_password(),
    "NETHCTI_AMI_PASSWORD": gen_password(),
    "CDRDBPASS": gen_password(),
    "NETHCTI_DB_PASSWORD": gen_password(),
    "TANCREDI_STATIC_TOKEN": gen_password(),
    "NETHVOICESECRETKEY": gen_password(),
    "JANUS_ADMIN_SECRET": gen_password(),
    "PHONEBOOK_DB_PASS": gen_password(),
    "PHONEBOOK_LDAP_PASS": gen_password(),
    "REPORTS_PASSWORD": gen_password(),
    "REPORTS_API_KEY": gen_password(),
    "REPORTS_SECRET": gen_password(),
    "SATELLITE_MQTT_PASSWORD": gen_password(),
    "SATELLITE_ARI_PASSWORD": gen_password()
}

agent.write_envfile("passwords.env", passwords)
