#!/usr/bin/env python3

#
# Copyright (C) 2025 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import agent
import os

node_id = int(os.environ['NODE_ID'])
agent_id = os.environ['AGENT_ID']
module_uuid = os.environ['MODULE_UUID']

with agent.redis_connect() as rdb:
    node_address = rdb.hget(f'node/{node_id}/vpn', 'ip_address')

# Create srv records in Redis for service discovery
with agent.redis_connect(privileged=True) as prdb:
    trx = prdb.pipeline()

    service_key = agent_id + "/srv/tcp/phonebook"
    trx.delete(service_key).hset(service_key, mapping={
        "node_address": node_address,
        "node_id": str(node_id),
    })

    # Publish change event
    trx.publish(agent_id + "/event/phonebook-settings-changed", json.dumps({
        "reason": os.getenv("AGENT_TASK_ACTION", "unknown"),
        "module_id": os.environ['MODULE_ID'],
        "node_id": node_id,
        "module_uuid": module_uuid
    }))

    service_key = agent_id + "/srv/udp/sip"
    trx.delete(service_key).hset(service_key, mapping={
        "node_address": node_address,
        "node_id": str(node_id),
        "port": os.environ["ASTERISK_SIP_PORT"],
    })

    # Publish change event
    trx.publish(agent_id + "/event/pbx-settings-changed", json.dumps({
        "reason": os.getenv("AGENT_TASK_ACTION", "unknown"),
        "module_id": os.environ['MODULE_ID'],
        "node_id": node_id,
        "module_uuid": module_uuid
    }))

    trx.execute()

