#!/usr/bin/env python3

import os
import sys
import smtplib
import ssl
import re
import requests
import json
import mysql.connector
from email.parser import Parser
from email.utils import getaddresses
from email.mime.text import MIMEText

def get_db_connection():
    """Get database connection using environment variables similar to PHP amp_conf"""
    cdr_db_host = os.environ.get('CDRDBHOST', os.environ.get('AMPDBHOST', '127.0.0.1'))
    cdr_db_port = int(os.environ.get('NETHVOICE_MARIADB_PORT', '3306'))
    cdr_db_name = os.environ.get('CDRDBNAME', 'asteriskcdrdb')
    cdr_db_user = os.environ.get('CDRDBUSER', os.environ.get('AMPDBUSER', ''))
    cdr_db_pass = os.environ.get('CDRDBPASS', os.environ.get('AMPDBPASS', ''))

    return mysql.connector.connect(
        host=cdr_db_host,
        port=cdr_db_port,
        database=cdr_db_name,
        user=cdr_db_user,
        password=cdr_db_pass,
        charset='utf8',
        ssl_disabled=True,
        autocommit=True
    )

# Check if SMTP is enabled
if os.environ.get('SMTP_ENABLED', '0') != '1':
    print("SMTP is not enabled.")
    sys.exit(0)

# Check required environment variables
required_vars = ['SMTP_HOST', 'SMTP_PORT']
for var in required_vars:
    if var not in os.environ:
        print(f"Environment variable {var} is not set.", file=sys.stderr)
        sys.exit(1)

# Read environment variables
SMTP_HOST = os.environ['SMTP_HOST']
SMTP_PORT = int(os.environ['SMTP_PORT'])
SMTP_ENCRYPTION = os.environ.get('SMTP_ENCRYPTION', 'none')
SMTP_TLSVERIFY = os.environ.get('SMTP_TLSVERIFY', '1')
SMTP_USERNAME = os.environ.get('SMTP_USERNAME', '')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD')

# Generate SMTP_FROM_ADDRESS if not set
if 'SMTP_FROM_ADDRESS' not in os.environ or not os.environ['SMTP_FROM_ADDRESS']:
    from_domain = ""
    if '@' in SMTP_USERNAME:
        # Get the from address from the smtp username
        from_domain = SMTP_USERNAME.split('@')[1]
    elif re.match(r'^(\d{1,3}\.){3}\d{1,3}$', SMTP_HOST):
        # Get the from address from NETHVOICE_HOST if smtp host is an IP address
        nethvoice_host = os.environ.get('NETHVOICE_HOST', '')
        if '.' in nethvoice_host:
            from_domain = '.'.join(nethvoice_host.split('.')[1:])
    else:
        # Get the from address from the smtp host
        if '.' in SMTP_HOST:
            from_domain = '.'.join(SMTP_HOST.split('.')[1:])
    
    from_name = os.environ.get('BRAND_NAME', 'nethvoice').lower().replace(' ', '_')
    SMTP_FROM_ADDRESS = f"{from_name}@{from_domain}"
else:
    SMTP_FROM_ADDRESS = os.environ['SMTP_FROM_ADDRESS']

# Validate SMTP_ENCRYPTION and SMTP_TLSVERIFY
if SMTP_ENCRYPTION not in ['starttls', 'tls', 'none','']:
    print("Invalid SMTP_ENCRYPTION value.", file=sys.stderr)
    sys.exit(1)
if SMTP_TLSVERIFY not in ['0', '1','']:
    print("Invalid SMTP_TLSVERIFY value.", file=sys.stderr)
    sys.exit(1)

# Create SSL context if TLS verification is disabled
if SMTP_TLSVERIFY == '0' or SMTP_TLSVERIFY == '':
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
else:
    context = None

# Parse the email message from stdin
parser = Parser()
message = parser.parse(sys.stdin)

# Extract recipients from To, Cc, Bcc headers
to = message.get_all('To', [])
cc = message.get_all('Cc', [])
bcc = message.get_all('Bcc', [])
all_recipients = getaddresses(to + cc + bcc)
recipient_emails = [addr for name, addr in all_recipients]
if not recipient_emails:
    print("No recipients specified.", file=sys.stderr)
    sys.exit(1)

# Remove Bcc header from the message
while 'Bcc' in message:
    del message['Bcc']

# Extract from address from the message or use the SMTP_FROM_ADDRESS as fallback
from_address = message.get('From')
if not from_address:
    from_address = SMTP_FROM_ADDRESS
    message['From'] = from_address

# if there is a wav attachment and the SATELLITE_VOICEMAIL_TRANSCRIPTION_ENABLED are enabled, query satellite api for transcription
if 'SATELLITE_VOICEMAIL_TRANSCRIPTION_ENABLED' in os.environ and os.environ['SATELLITE_VOICEMAIL_TRANSCRIPTION_ENABLED'] == 'True':
    if 'Content-Type' in message and 'multipart/mixed' in message['Content-Type']:
        # Extract the audio data from the wav attachment
        audio_data = None
        for part in message.walk():
            if part.get_content_type() == 'audio/x-wav':
                audio_data = part.get_payload(decode=True)
                break
        if audio_data:
            try:
                # Get satellite HTTP port from environment
                satellite_port = os.environ.get('SATELLITE_HTTP_PORT', '8080')
                satellite_url = f"http://127.0.0.1:{satellite_port}/api/get_transcription"

                # Prepare the file for upload
                files = {'file': ('voicemail.wav', audio_data, 'audio/wav')}

                # Make the API call to satellite
                response = requests.post(satellite_url, files=files, timeout=30)
                response.raise_for_status()

                # Parse JSON response and extract transcript
                response_data = response.json()
                transcription_result = response_data.get('transcript', '').strip()
                detected_language = response_data.get('detected_language', None)

                if transcription_result:
                    # Add transcription to email body
                    for part in message.walk():
                        if (part.get_content_type() == "text/plain" and
                                part.get_content_disposition() in (None, "inline")):
                            body = part.get_payload(decode=True).decode(part.get_content_charset() or "utf-8")
                            body += "\n\n--- "
                            if detected_language == 'it':
                                body += "Trascrizione"
                            else:
                                body += "Transcription"
                            body += f" ---\n{transcription_result}\n"
                            part.set_payload(body)
                            part.set_charset("UTF-8")
                            break

                    # extract the message id
                    message_id = message.get('Message-ID', '')
                    if message_id:
                        # Extract the voicemail ID from the Message-ID
                        voicemessage_id = message_id.split('-')[1]
                        # Update the voicemessage table in the database with the transcription
                        try:
                            conn = get_db_connection()
                            cursor = conn.cursor()
                            cursor.execute(
                                "INSERT IGNORE INTO voicemessages_transcriptions (voicemessage_id,transcription) VALUES (%s, %s)",
                                (voicemessage_id,transcription_result)
                            )
                            conn.commit()
                            cursor.close()
                            conn.close()
                        except mysql.connector.Error as db_error:
                            print(f"Database error updating transcription: {db_error}", file=sys.stderr)
                        except Exception as db_error:
                            print(f"Unexpected database error: {db_error}", file=sys.stderr)

            except requests.exceptions.RequestException as e:
                print(f"Error transcribing audio: {e}", file=sys.stderr)
            except json.JSONDecodeError as e:
                print(f"Error parsing transcription response: {e}", file=sys.stderr)
            except Exception as e:
                print(f"Unexpected error during transcription: {e}", file=sys.stderr)

# Connect to SMTP server and send the email
try:
    if SMTP_ENCRYPTION == 'tls':
        smtp = smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT, context=context)
    else:
        smtp = smtplib.SMTP(SMTP_HOST, SMTP_PORT)
        if SMTP_ENCRYPTION == 'starttls':
            smtp.starttls(context=context)
    if SMTP_USERNAME:
        smtp.login(SMTP_USERNAME, SMTP_PASSWORD)
    
    smtp.sendmail(
        from_address,
        recipient_emails,
        message.as_string().encode('utf-8')
    )

    smtp.quit()
except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)
