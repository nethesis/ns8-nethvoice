#!/usr/bin/env python3

import os
import sys
import smtplib
import ssl
import re
from email.parser import Parser
from email.utils import getaddresses

# Check if SMTP is enabled
if os.environ.get('SMTP_ENABLED', '0') != '1':
    print("SMTP is not enabled.")
    sys.exit(0)

# Check required environment variables
required_vars = ['SMTP_HOST', 'SMTP_PORT']
for var in required_vars:
    if var not in os.environ:
        print(f"Environment variable {var} is not set.", file=sys.stderr)
        sys.exit(1)

# Read environment variables
SMTP_HOST = os.environ['SMTP_HOST']
SMTP_PORT = int(os.environ['SMTP_PORT'])
SMTP_ENCRYPTION = os.environ.get('SMTP_ENCRYPTION', 'none')
SMTP_TLSVERIFY = os.environ.get('SMTP_TLSVERIFY', '1')
SMTP_USERNAME = os.environ.get('SMTP_USERNAME', '')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD')

# Generate SMTP_FROM_ADDRESS if not set
if 'SMTP_FROM_ADDRESS' not in os.environ or not os.environ['SMTP_FROM_ADDRESS']:
    from_domain = ""
    if '@' in SMTP_USERNAME:
        # Get the from address from the smtp username
        from_domain = SMTP_USERNAME.split('@')[1]
    elif re.match(r'^(\d{1,3}\.){3}\d{1,3}$', SMTP_HOST):
        # Get the from address from NETHVOICE_HOST if smtp host is an IP address
        nethvoice_host = os.environ.get('NETHVOICE_HOST', '')
        if '.' in nethvoice_host:
            from_domain = '.'.join(nethvoice_host.split('.')[1:])
    else:
        # Get the from address from the smtp host
        if '.' in SMTP_HOST:
            from_domain = '.'.join(SMTP_HOST.split('.')[1:])
    
    from_name = os.environ.get('BRAND_NAME', 'nethvoice').lower().replace(' ', '_')
    SMTP_FROM_ADDRESS = f"{from_name}@{from_domain}"
else:
    SMTP_FROM_ADDRESS = os.environ['SMTP_FROM_ADDRESS']

# Validate SMTP_ENCRYPTION and SMTP_TLSVERIFY
if SMTP_ENCRYPTION not in ['startls', 'tls', 'none','']:
    print("Invalid SMTP_ENCRYPTION value.", file=sys.stderr)
    sys.exit(1)
if SMTP_TLSVERIFY not in ['0', '1','']:
    print("Invalid SMTP_TLSVERIFY value.", file=sys.stderr)
    sys.exit(1)

# Create SSL context if TLS verification is disabled
if SMTP_TLSVERIFY == '0' or SMTP_TLSVERIFY == '':
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE
else:
    context = None

# Parse the email message from stdin
parser = Parser()
message = parser.parse(sys.stdin)

# Extract recipients from To, Cc, Bcc headers
to = message.get_all('To', [])
cc = message.get_all('Cc', [])
bcc = message.get_all('Bcc', [])
all_recipients = getaddresses(to + cc + bcc)
recipient_emails = [addr for name, addr in all_recipients]
if not recipient_emails:
    print("No recipients specified.", file=sys.stderr)
    sys.exit(1)

# Remove Bcc header from the message
while 'Bcc' in message:
    del message['Bcc']

# Extract from address from the message or use the SMTP_FROM_ADDRESS as fallback
from_address = message.get('From')
if not from_address:
    from_address = SMTP_FROM_ADDRESS
    message['From'] = from_address

# Connect to SMTP server and send the email
try:
    if SMTP_ENCRYPTION == 'tls':
        smtp = smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT, context=context)
    else:
        smtp = smtplib.SMTP(SMTP_HOST, SMTP_PORT)
        if SMTP_ENCRYPTION == 'startls':
            smtp.starttls(context=context)
    if SMTP_USERNAME:
        smtp.login(SMTP_USERNAME, SMTP_PASSWORD)
    smtp.sendmail(from_address, recipient_emails, message.as_string())
    smtp.quit()
except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)
