#!/usr/bin/python3
"""
Asterisk AMI client to recall on busy extensions.

Copyright (C) 2024 Nethesis S.r.l.
SPDX-License-Identifier: GPL-3.0-or-later
"""

import asyncio
import logging
import configparser
import os
import re
import sys

# Set up the module logger
logger = logging.getLogger("recallonbusy")
logger.setLevel(logging.DEBUG)  # Default to DEBUG; will adjust based on config later
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('[recallonbusy] %(levelname)s: %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

devices_status = {}
mainextensions_state = {}

class AMIClient:
	def __init__(self, config):
		self.reader = None
		self.writer = None
		self.event_listeners = []  # List of async event listener callbacks
		self.host = config['host']
		self.port = config['port']
		self.username = config['username']
		self.secret = config['secret']
		self.debug = config['debug']
		self.check_interval = config['check_interval']
		logger.setLevel(logging.DEBUG if self.debug else logging.INFO)

	async def connect(self):
		"""Establish a connection to the AMI."""
		logger.info(f"Connecting to {self.host}:{self.port}")
		self.reader, self.writer = await asyncio.open_connection(self.host, self.port)
		await self._login()
		# Start listening for events as a background task
		asyncio.create_task(self._listen())

	async def _login(self):
		"""Send the login action to AMI."""
		action = (
			f"Action: Login\r\n"
			f"Username: {self.username}\r\n"
			f"Secret: {self.secret}\r\n\r\n"
		)
		self.writer.write(action.encode())
		await self.writer.drain()
		logger.debug("Sent login action")

	async def _listen(self):
		"""Continuously listen for incoming data from AMI."""
		logger.debug("Started listener task")
		buffer = ''
		while True:
			try:
				data = await self.reader.read(4096)
				if not data:
					break
				buffer += data.decode()
				# Process complete events separated by double CRLF
				while '\r\n\r\n' in buffer:
					raw_event, buffer = buffer.split('\r\n\r\n', 1)
					event = self._parse_event(raw_event)
					await self._handle_event(event)
			except Exception as e:
				logger.error(f"in listener task: {e}", file=sys.stderr)
				break

	def _parse_event(self, data):
		"""Parse raw event data into a dictionary."""
		event = {}
		for line in data.strip().split('\r\n'):
			if ': ' in line:
				key, value = line.split(': ', 1)
				event[key.strip()] = value.strip()
		#logger.debug(f"Parsed event: {event}")
		return event

	async def _handle_event(self, event):
		"""Notify all listeners about the event."""
		for listener in self.event_listeners:
			await listener(event)

	def add_event_listener(self, listener):
		"""Add an asynchronous listener for AMI events."""
		self.event_listeners.append(listener)

	def remove_event_listener(self, listener):
		"""Remove a listener from AMI events."""
		if listener in self.event_listeners:
			self.event_listeners.remove(listener)

	async def send_action(self, action_dict):
		"""Send an action to the AMI."""
		action = ''.join(f"{key}: {value}\r\n" for key, value in action_dict.items())
		action += '\r\n'
		self.writer.write(action.encode())
		await self.writer.drain()
		logger.debug(f"Sent action: {action_dict}")

	async def close(self):
		"""Close the connection to the AMI."""
		if self.writer:
			self.writer.close()
			await self.writer.wait_closed()
			logger.debug("Closed connection to AMI")


def load_config(config_path):
	"""Load configuration from the specified file."""
	config = {}
	parser = configparser.ConfigParser()
	if not os.path.exists(config_path):
		raise FileNotFoundError(f"Configuration file not found: {config_path}")
	parser.read(config_path)
	config['host'] = parser.get('recallonbusy', 'Host', fallback='localhost')
	config['port'] = parser.getint('recallonbusy', 'Port', fallback=5038)
	config['username'] = parser.get('recallonbusy', 'Username', fallback='')
	config['secret'] = parser.get('recallonbusy', 'Secret', fallback='')
	config['debug'] = parser.getboolean('recallonbusy', 'Debug', fallback=False)
	config['check_interval'] = parser.getint('recallonbusy', 'CheckInterval', fallback=20)
	logger.setLevel(logging.DEBUG if config['debug'] else logging.INFO)
	return config

async def main():
	config = load_config('/etc/asterisk/recallonbusy.cfg')
	client = AMIClient(config)

	async def connect():
		"""Try to connect to the AMI."""
		while True:
			try:
				await client.connect()
				return True
			except ConnectionRefusedError:
				logger.error("Connection to AMI refused, retrying in 5 seconds...")
				await asyncio.sleep(5)
			except Exception as e:
				logger.error(f"connecting to AMI: {e}")
				await asyncio.sleep(30)

	async def device_state_change_event_listener(event):
		"""Handle DeviceStateChange AMI events."""
		if 'Event' not in event or event['Event'] != 'DeviceStateChange':
			return
		logger.debug(f"Handling event: {event}")

		if 'State' in event and 'Device' in event and re.match(r'^PJSIP/[0-9]{2,}$', event['Device']):
			# check if state has changed
			if event['Device'] not in devices_status or devices_status[event['Device']] != event['State']:
				# save device state
				devices_status[event['Device']] = event['State']
				logger.debug(f"Device {event['Device']} changed state to {event['State']}")

				# Extract the main extension from the device string
				mainextension = re.sub(r'^PJSIP/9[0-9]([0-9]+)$|^PJSIP/([^9][0-9]+)$', r'\1\2', event['Device'])

				# ask mainextension hint
				await client.send_action({
					'Action': 'ExtensionState',
					'Exten': mainextension,
					'Context': 'ext-local',
					'ActionID': f'{mainextension}_hint'
				})

	async def hint_event_listener(event):
		"""Handle Hint AMI events."""
		if 'Response' not in event or event['Response'] != 'Success' or 'Message' not in event or event['Message'] != 'Extension Status' or 'Status' not in event or 'ActionID' not in event or not re.match(r'^[0-9]+_hint$', event['ActionID']):
			return
		logger.debug(f"Handling event: {event}")
		mainextensions_state[event['Exten']] = event['Status']
		if event['Status'] == '0':
			logger.debug(f"Extension {event['Exten']} is available, checking for waiting extensions...")
			# Send DBGet to fetch waiting extensions
			await client.send_action({
				'Action': 'DBGet',
				'ActionID': f'{event["Exten"]}_get_waiting',
				'Family': 'ROB',
				'Key': event['Exten']
			})

	async def db_get_response_event_listener(event):
		"""Handle DBGetResponse AMI events."""
		if 'Event' not in event or event['Event'] != 'DBGetResponse':
			return
		logger.debug(f"Handling event: {event}")

		if (event.get('Family') == 'ROB' and 'Key' in event and
			'Val' in event and event['Val'] != '' and 
			'ActionID' in event and re.match(r'^[0-9]+_get_waiting$', event['ActionID'])):
			mainextension = re.sub(r'^([0-9]+)_get_waiting$', r'\1', event['ActionID'])
			waiting_extensions = event['Val'].split('&')
			logger.debug(f"Waiting extensions for {mainextension}: {waiting_extensions}")
			for waiting_extension in waiting_extensions:
				waiting_state = mainextensions_state.get(waiting_extension)
				if waiting_state == '0':
					logger.info(f"Calling waiting extension {waiting_extension}")
					await client.send_action({
						'Action': 'Originate',
						'Channel': f'Local/{waiting_extension}@from-internal',
						'Context': 'from-internal',
						'Timeout': 150000,
						'CallerID': mainextension,
						'Exten': mainextension,
						'Priority': 1
					})
					# Remove the called waiting extension and update the database
					waiting_extensions.remove(waiting_extension)
					await client.send_action({
						'Action': 'DBPut',
						'Family': 'ROB',
						'Key': mainextension,
						'Val': '&'.join(waiting_extensions)
					})
					break
				logger.debug(f"Skipping waiting extension {waiting_extension}: {waiting_state}")

	# Register the asynchronous event listeners
	client.add_event_listener(device_state_change_event_listener)
	client.add_event_listener(db_get_response_event_listener)
	client.add_event_listener(hint_event_listener)

	# connect to AMI
	await connect()

	# Continuously send a DeviceStateList action at the configured interval
	while True:
		try:
			await client.send_action({'Action': 'DeviceStateList'})
			await asyncio.sleep(client.check_interval)
		except Exception as e:
			logger.error(f"sending action: {e}")
			await connect()  # Attempt reconnection on error

if __name__ == '__main__':
	asyncio.run(main())
